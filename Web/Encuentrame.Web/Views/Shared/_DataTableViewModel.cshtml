@using System.Globalization
@using Encuentrame.Web
@using Encuentrame.Web.Helpers
@using Encuentrame.Web.Helpers.DataTable.Filters
@using Encuentrame.Support
@model Encuentrame.Web.Helpers.DataTable.ViewModels.DataTableViewModel
@{
    string childProperty = string.Empty;

    if (!string.IsNullOrEmpty(Model.ChildPropertyName))
    {
        childProperty = string.Format("data-child-property={0}", Model.ChildPropertyName);
    }

    var rows = new List<List<IBaseFilter>>();
    var currentRow = new List<IBaseFilter>();
    rows.Add(currentRow);
    var widthSum = 0;
    foreach (var filter in Model.Filters)
    {
        if (widthSum + filter.Width > 12)
        {

            currentRow = new List<IBaseFilter>();
            rows.Add(currentRow);
            widthSum = 0;
        }
        var columnData = Model.Columns[filter.Name];
        filter.ColumnData = columnData;
        currentRow.Add(filter);
        widthSum += filter.Width;
    }

    if (Model.ChildFilters != null)
    {
        foreach (var filter in Model.ChildFilters)
        {
            if (widthSum + filter.Width > 12)
            {
                currentRow = new List<IBaseFilter>();
                rows.Add(currentRow);
                widthSum = 0;
            }
            var columnData = Model.ChildTable.Columns[filter.Name];
            filter.ColumnData = columnData;
            currentRow.Add(filter);
            widthSum += filter.Width;
        }
    }

    var urlData = string.Empty;

    if (!string.IsNullOrEmpty(Model.Url))
    {
        urlData = "data-url={0}".FormatWith(Model.Url);
    }

    var urlLanguage= "data-url-language={0}".FormatWith(Scripts.Url(@"~/scripts/app/datatable-spanish.js"));

    var childUrlData = string.Empty;

    if (Model.HasChildTable && !string.IsNullOrEmpty(Model.ChildTable.Url))
    {
        childUrlData = "data-url={0}".FormatWith(Model.ChildTable.Url);
    }

    var lengthString = string.Empty;
    var defaultLengthString = string.Empty;
    if (Model.Lengths != null && Model.Lengths.Length > 0)
    {
        var lenghtsToShow = Model.Lengths.Join(",");
        lengthString = "data-lengths-to-show={0}".FormatWith(lenghtsToShow);
        if (Model.DefaultLength.HasValue)
        {
            defaultLengthString = "data-default-length={0}".FormatWith(Model.DefaultLength.Value);
        }
    }

    var sortOrderData = string.Empty;
    var sortByColumnIndexData = string.Empty;
    if (Model.SortByColumnIndex.HasValue)
    {
        sortByColumnIndexData = "data-sort-column={0}".FormatWith(Model.SortByColumnIndex.Value);
        sortOrderData = "data-default-order={0}".FormatWith(Model.DefaultSortOrder);
    }

    var childSortOrderData = string.Empty;
    var childSortByColumnIndexData = string.Empty;
    if (Model.HasChildTable && Model.ChildTable.SortByColumnIndex.HasValue)
    {
        childSortByColumnIndexData = "data-sort-column={0}".FormatWith(Model.ChildTable.SortByColumnIndex.Value);
        childSortOrderData = "data-default-order={0}".FormatWith(Model.ChildTable.DefaultSortOrder);
    }

    var parentPropertyNameData = string.Empty;
    if (!string.IsNullOrEmpty(Model.ParentPropertyName))
    {
        parentPropertyNameData = "data-parent-property={0}".FormatWith(Model.ParentPropertyName);
    }

    var childParentPropertyNameData = string.Empty;
    if (Model.HasChildTable && !string.IsNullOrEmpty(Model.ChildTable.ParentPropertyName))
    {
        childParentPropertyNameData = "data-parent-property={0}".FormatWith(Model.ChildTable.ParentPropertyName);
    }
}
<div class="table-container">

    @if (Model.Filters.Count > 0 && Model.SearchEnabled)
    {
        <div class="panel panel-info " id="@("filter"+Model.TableId)">
            <div class="panel-heading">
                <div class="row">
                    <div class="panel-left col-xs-4">
                        <a role="button"  data-toggle="collapse" data-parent="#@("filter"+Model.TableId)" href="#@("filterBody"+Model.TableId)" aria-expanded="true" aria-controls="@("filterBody"+Model.TableId)">
                            @Translations.Filter
                        </a>
                    </div>
                    <div class="panel-right col-xs-4 pull-right text-right">
                        <a href="#" class="filter-clear">@Translations.Clear</a>
                    </div>
                </div>
            </div>
            <div  id="@("filterBody"+Model.TableId)" class="panel-body panel-collapse collapse in ">
                <div class="data-table-filters" role="form" data-table-id="@Model.TableId" @childProperty>

                    @foreach (var filters in rows)
                    {
                        <div class="row">
                            @foreach (var filter in filters)
                            {                              
                                @Html.EditorFor(x => filter, "Datatables/" + filter.DisplayTemplate)
                            }
                        </div>
                    }

                </div>
                @if (Model.DeferredSearch)
                {
                    <a href="#" class="filter-table btn btn-primary filter-button-style">@TranslationsHelper.Get("Filter")</a>
                }
            </div>
        </div>
    }
    <table class='table table-striped table-style @Model.ClassName @Model.ChildTableClass' id="@Model.TableId" data-server-side="@Model.ServerSide.ToString().ToLower()"
           data-allow-search="@Model.SearchEnabled.ToString().ToLower()" @urlLanguage @urlData @sortByColumnIndexData @sortOrderData @parentPropertyNameData
           @lengthString @defaultLengthString data-hide-show-all="@((!Model.ShowAllOption).ToString().ToLower())" data-allow-selection="@Model.AllowSelection.ToString().ToLower()">
        <thead>
        <tr>
            @if (Model.HasChildTable)
            {
                <th></th>
            }
            @if (Model.AllowSelection)
            {
                <th data-sortable="false" class="td.select-checkbox"><input type="checkbox" name="select_all" value="1" id="select_all"></th>
            }

            @foreach (var columnData in Model.Columns.Values)
            {
                var columnNameData = string.Empty;
                if (columnData.HasDataAssociated)
                {
                    columnNameData = string.Format("data-name={0}", columnData.Name);
                }

                var templateData = string.Empty;
                if (!string.IsNullOrEmpty(columnData.Template))
                {
                    templateData = string.Format("data-th-template={0}", columnData.Template);
                }
                var typeData = string.Empty;
                if (columnData.Type != null)
                {
                    if (columnData.Type == typeof(DateTime?))
                    {
                        typeData = string.Format("data-type={0}", typeof(DateTime).Name);
                    }
                    else
                    {
                        typeData = string.Format("data-type={0}", columnData.Type.Name);
                    }
                }
                var isReferenceData = string.Empty;
                string namePathData = string.Empty;
                if (columnData.IsReference)
                {
                    isReferenceData = string.Format("data-is-reference={0}", columnData.IsReference.ToString().ToLower());
                    namePathData = string.Format("data-name-path={0}", columnData.NamePath);
                }
                <th @columnNameData data-index="@columnData.Index" data-visible="@columnData.Visible.ToString().ToLower()"
                                    data-totalize="@columnData.Totalize.ToString().ToLower()" data-sortable="@columnData.Sortable.ToString().ToLower()"
                                    @templateData @typeData @isReferenceData @namePathData>
                    @(!string.IsNullOrEmpty(columnData.TranslationKey) ? TranslationsHelper.Get(columnData.TranslationKey) : TranslationsHelper.Get(columnData.Name))
                </th>
            }
        </tr>
        </thead>
        @if (Model.AddFooter)
        {
            //tfoot
            <tfoot>
            <tr>
                @if (Model.HasChildTable)
                {
                    <th></th>
                }

                @if (Model.AllowSelection)
                {
                    <th></th>
                }

                @foreach (var columnData in Model.Columns.Values)
                {
                    <th></th>
                }
            </tr>
            </tfoot>
        }
    </table>
    
    @if (Model.HasChildTable)
    {
    @*Child Table*@
        <table class='table table-striped table-style @Model.ChildTable.ClassName @Model.ChildTable.ChildTableClass' id="@Model.ChildTable.TableId" 
               data-server-side="@Model.ChildTable.ServerSide.ToString().ToLower()"
               data-allow-search="@Model.ChildTable.SearchEnabled.ToString().ToLower()" @childUrlData 
               @childSortByColumnIndexData @childSortOrderData @childParentPropertyNameData
               @lengthString @defaultLengthString data-hide-show-all="@((!Model.ShowAllOption).ToString().ToLower())" data-allow-selection="@Model.AllowSelection.ToString().ToLower()">
            <thead>
            <tr>
                @if (Model.ChildTable.HasChildTable)
                {
                    <th></th>
                }
                @if (Model.ChildTable.AllowSelection)
                {
                    <th data-sortable="false" class="td.select-checkbox"><input type="checkbox" name="select_all" value="1" id="select_all"></th>
                }

                @foreach (var columnData in Model.ChildTable.Columns.Values)
                {
                    var columnNameData = string.Empty;
                    if (columnData.HasDataAssociated)
                    {
                        columnNameData = string.Format("data-name={0}", columnData.Name);
                    }

                    var templateData = string.Empty;
                    if (!string.IsNullOrEmpty(columnData.Template))
                    {
                        templateData = string.Format("data-th-template={0}", columnData.Template);
                    }
                    var typeData = string.Empty;
                    if (columnData.Type != null)
                    {
                        if (columnData.Type == typeof(DateTime?))
                        {
                            typeData = string.Format("data-type={0}", typeof(DateTime).Name);
                        }
                        else
                        {
                            typeData = string.Format("data-type={0}", columnData.Type.Name);
                        }
                    }
                    var isReferenceData = string.Empty;
                    string namePathData = string.Empty;
                    if (columnData.IsReference)
                    {
                        isReferenceData = string.Format("data-is-reference={0}", columnData.IsReference.ToString().ToLower());
                        namePathData = string.Format("data-name-path={0}", columnData.NamePath);
                    }
                    <th @columnNameData data-index="@columnData.Index" data-visible="@columnData.Visible.ToString().ToLower()"
                                        data-totalize="@columnData.Totalize.ToString().ToLower()" data-sortable="@columnData.Sortable.ToString().ToLower()"
                                        @templateData @typeData @isReferenceData @namePathData>
                        @(!string.IsNullOrEmpty(columnData.TranslationKey) ? TranslationsHelper.Get(columnData.TranslationKey) : TranslationsHelper.Get(columnData.Name))
                    </th>
                }
            </tr>
            </thead>
            @if (Model.ChildTable.AddFooter)
            {
                //tfoot
                <tfoot>
                <tr>
                    @if (Model.ChildTable.HasChildTable)
                    {
                        <th></th>
                    }

                    @if (Model.ChildTable.AllowSelection)
                    {
                        <th></th>
                    }

                    @foreach (var columnData in Model.ChildTable.Columns.Values)
                    {
                        <th></th>
                    }
                </tr>
                </tfoot>
            }
        </table>
    }
</div>    